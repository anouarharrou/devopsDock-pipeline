version: '3.9'

networks:
  devops-netowrk:
    external: true
  traefik-network:
    external: true

volumes:
  jenkins:
  nexus:
  sonarqube:
  gitlab-data:
  gitlab-logs:
  gitlab-config:
  gitlab-runner-config:
  postgres:


services:
  nexus:
    image: ${NEXUS_IMAGE}
    container_name: nexus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nexus.rule=Host(`${NEXUS_HOSTNAME}`)"
      - "traefik.http.services.nexus.loadbalancer.server.port=${NEXUS_PORT}"
    networks:
      - devops-netowrk
    volumes:
      - "nexus:/var/lib/nexus"

  jenkins:
    image: ${JENKINS_IMAGE}
    container_name: jenkins
    privileged: true
    user: root
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOSTNAME}`)"
      - "traefik.http.services.jenkins.loadbalancer.server.port=${JENKINS_PORT}"
    volumes:
      - "jenkin:/var/jenkins_home"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - devops-netowrk

  sonarqube:
    image: ${SONARQUBE_IMAGE}
    container_name: sonarqube
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_HOSTNAME}`)"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=${SONARQUBE_PORT}"
    networks:
      - devops-netowrk
    depends_on:
      - postgres
    links:
      - postgres
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SONARQUBE_JDBC_USERNAME=${POSTGRES_USER}
      - SONARQUBE_JDBC_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - "sonarqube:/var/lib/sonar"

  postgres:
    networks:
      - devops-netowrk
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - "postgres:/var/lib/postgresql"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  traefik:
    image: ${TRAEFIK_IMAGE}
    container_name: traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "${TRAEFIK_PORT}:80"
      - "8080:8080"  # Traefik Dashboard
    networks:
      - devops-netowrk
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"


  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: pgadmin
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOSTNAME}`)"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=${PGADMIN_PORT}"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    networks:
      - devops-netowrk

  gitlab:
    image: ${GITLAB_IMAGE}
    container_name: gitlab
    volumes:
      - gitlab-data:/var/opt/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-config:/etc/gitlab
    shm_size: "256m"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${GITLAB_HOSTNAME}'
    networks:
      - devops-netowrk
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 240s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOSTNAME}`)"
      - "traefik.http.routers.gitlab.service=gitlab"
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy

  gitlab-runner:
    image: ${GITLAB_RUNNER_IMAG}
    volumes:
      - gitlab-runner-config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devops-netowrk
    depends_on:
      - gitlab
    restart: unless-stopped
