version: '3.9'

networks:
  devops-network:  

volumes:
  jenkins: {}
  nexus-data: {}
  sonar-data: {}
  sonar-extensions: {}
  sonar-logs: {}
  gitlab-data: {}
  gitlab-logs: {}
  gitlab-config: {}
  gitlab-runner-config: {}
  postgres: {}

services:
  nexus:
    image: ${NEXUS_IMAGE}
    restart: always
    volumes:
      - "nexus-data:/sonatype-work"
    labels:
      - traefik.enable=true
      - traefik.http.routers.nexus.rule=Host(`nexus-devops.com`)
      - traefik.http.routers.nexus.entrypoints=https
      - traefik.http.services.nexus.loadbalancer.server.port=${NEXUS_PORT} # Adjust port as needed
      - traefik.http.routers.https.tls=true
      - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER} 
    ports:
      - "${NEXUS_PORT}:${NEXUS_PORT}"
    networks:
      - devops-network

  jenkins:
    image: ${JENKINS_IMAGE}
    container_name: jenkins
    privileged: true
    user: root
    labels:
      - traefik.enable=true
      - traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOSTNAME}`)
      - traefik.http.services.jenkins.loadbalancer.server.port=${JENKINS_PORT}
      - traefik.http.routers.jenkins.entrypoints=https
      - traefik.http.routers.https.tls=true
      - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER}
    ports:
      - "8080:8080"
    volumes:
      - jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devops-network

  sonarqube:
    image: ${SONARQUBE_IMAGE}
    container_name: sonarqube
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_HOSTNAME}`)
      - traefik.http.routers.sonarqube.entrypoints=https
      - traefik.http.services.sonarqube.loadbalancer.server.port=${SONARQUBE_PORT}
      - traefik.http.routers.https.tls=true
      - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER}
    ports:
      - "${SONARQUBE_PORT}:${SONARQUBE_PORT}"
    networks:
      - devops-network
    depends_on:
      - postgres
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonardb:5432/sonar
      - SONARQUBE_JDBC_USERNAME=${POSTGRES_USER}
      - SONARQUBE_JDBC_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - sonar-data:/opt/sonarqube/data
      - sonar-extensions:/opt/sonarqube/extensions
      - sonar-logs:/opt/sonarqube/logs

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres:/var/lib/postgresql
    restart: unless-stopped
    networks:
      - devops-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  traefik:
    image: ${TRAEFIK_IMAGE}
    container_name: traefik
    command:
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --api=true
      - --accesslog=true
      - --api.dashboard=true
      - --configFile=./traefik.yaml
      - --entrypoints.http.address=:8082
      - --entrypoints.https.address=:443
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http
      - --certificatesresolvers.letsencrypt.acme.email=${EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/letsencrypt/acme.json
    labels:
      - traefik.enable=true
      - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.to-https.entrypoints=http
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.to-https.middlewares=to-https
      - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.entrypoints=https
      - traefik.http.services.dashboard.loadbalancer.server.port=8082
      - traefik.http.routers.http-catchall.entrypoints=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082"  # Traefik Dashboard
    networks:
      - devops-network
    volumes:     
      - ./data/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: pgadmin
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOSTNAME}`)
      - traefik.http.routers.pgadmin.entrypoints=https
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.https.tls=true
      - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER}
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres
    networks:
      - devops-network

  gitlab:
    image: ${GITLAB_IMAGE}
    container_name: gitlab
    restart: always
    hostname: 'gitlab-devops.com'
    volumes:
      - gitlab-data:/var/opt/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-config:/etc/gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab-devops.com:8929'
        gitlab_rails['gitlab_shell_ssh_port'] = 2424
    ports:
      - "${GITLAB_PORT}:${GITLAB_PORT}"
      - '2424:2424'
    networks:
      - devops-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOSTNAME}`)
      - traefik.http.services.gitlab.loadbalancer.server.port=${GITLAB_PORT}
      - traefik.http.routers.gitlab.entrypoints=https
      - traefik.http.routers.https.tls=true
      - traefik.http.routers.https.tls.certresolver=${CERT_RESOLVER}
    depends_on:
      postgres:
        condition: service_healthy
    shm_size: "256m"
  