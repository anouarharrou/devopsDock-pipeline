version: '3.9'

networks:
  devops-network:  

volumes:
  jenkins: {}
  nexus: {}
  sonarqube: {}
  gitlab-data: {}
  gitlab-logs: {}
  gitlab-config: {}
  gitlab-runner-config: {}
  postgres: {}

services:
  nexus:
    image: ${NEXUS_IMAGE}
    container_name: nexus
    privileged: true
    user: root
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nexus.rule=Host(`${NEXUS_HOSTNAME}`)"
      - "traefik.http.routers.nexus.entrypoints=web"
      - "traefik.http.services.nexus.loadbalancer.server.port=80"
    ports:
      - "8085:8085"
    networks:
      - devops-network
    volumes:
      - nexus:/var/lib/nexus
    cap_add:
      - NET_BIND_SERVICE

  jenkins:
    image: ${JENKINS_IMAGE}
    container_name: jenkins
    privileged: true
    user: root
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOSTNAME}`)"
      - "traefik.http.routers.jenkins.entrypoints=web"
      - "traefik.http.services.jenkins.loadbalancer.server.port=80"
    ports:
      - "8080:8080"
    volumes:
      - jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devops-network

  sonarqube:
    image: ${SONARQUBE_IMAGE}
    container_name: sonarqube
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`${SONARQUBE_HOSTNAME}`)"
      - "traefik.http.routers.jenkins.entrypoints=web"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=${SONARQUBE_PORT}"
    ports:
      - "${SONARQUBE_PORT}:${SONARQUBE_PORT}"
    networks:
      - devops-network
    depends_on:
      - postgres
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SONARQUBE_JDBC_USERNAME=${POSTGRES_USER}
      - SONARQUBE_JDBC_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - sonarqube:/var/lib/sonar

  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql
    restart: unless-stopped
    networks:
      - devops-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  traefik:
    image: ${TRAEFIK_IMAGE}
    container_name: traefik
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping=true"
      - "--ping.entrypoint=ping"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"  # Traefik Dashboard
    networks:
      - devops-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8081"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: pgadmin
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PGADMIN_HOSTNAME}`)"
      - "traefik.http.routers.jenkins.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=5050"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    networks:
      - devops-network
